scalar Timestamp
type ElementType{
    id: ID!
    code: String!
    title: String!
}
type Element{
    id: ID!
    vrId: String!
    elementType: ElementType!
    outputElementTransactionList: [OutputElementTransaction]!
    inputElementTransactionList: [InputElementTransaction]!
}
type Calculation{
    id: ID!
    actionDate: Timestamp!
    inputElementTransactionList: [InputElementTransaction]!
    outputElementTransactionList: [OutputElementTransaction]!
}
type InputParameter{
    id: ID!
    code: String!
    title: String!
    dataType: String!
    inputElementValueList: [InputElementValue]!
}
type OutputParameter{
    id: ID!
    code: String!
    title: String!
    dataType: String!
    outputElementValueList: [OutputElementValue]!
}
type OutputElementTransaction{
    id: ID!
    element: Element!
    calculation: Calculation!
    outputElementValueList: [OutputElementValue]!
}
type InputElementTransaction{
    id: ID!
    element: Element!
    calculation: Calculation!
    inputElementValueList: [InputElementValue]!
}
type InputElementValue{
    id: ID!
    data: String!
    dataType: String!
    inputParameter: InputParameter!
    inputElementTransaction: InputElementTransaction!
}
type OutputElementValue{
    id: ID!
    data: String!
    dataType: String!
    outputParameter: OutputParameter!
    outputElementTransaction: OutputElementTransaction!
}
input ElementTypeInput{
    code: String!
    title: String!
}
input ElementInput{
    vrId: String!
    elementType: String!
}
input OutputParameterInput{
    code: String!
    title: String!
    dataType: String!
}
input InputParameterInput{
    code: String!
    title: String!
    dataType: String!
}
input OutputParameterIdAndFormula{
    outputParameterId: ID!
    elementId: ID!
    formula: String!
}
input InputParameterAndElementValue{
    inputParameterId: ID!
    elementId: ID!
    value: String!
}
type Query {
    findElementById(id: ID!): Element
    findElementByVrIdAndByElementType(vrId: String!, elementTypeCode: String!): Element
    findCalculationById(id: ID!): Calculation
}
type Mutation{
    persistElement(ElementInput: ElementInput!): Element
    persistOutputParameter(outputParameterInput: OutputParameterInput!): OutputParameter
    persistInputParameter(inputParameterInput: InputParameterInput!): InputParameter
    persistElementType(elementTypeInput: ElementTypeInput!): ElementType
    calculate(
        inputParameterAndElementValueList: [InputParameterAndElementValue],
        outputParameterAndFormulaList: [OutputParameterIdAndFormula],
        actionDate: Timestamp
    ): Calculation
}